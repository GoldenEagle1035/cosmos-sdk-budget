swagger: '2.0'
info:
  title: Cosmos SDK Budget Module - REST and gRPC Gateway docs
  description: 'A REST interface for state queries, transactions'
  version: 1.0.0
paths:
  '/cosmos/budget/v1beta1/addresses/{name}':
    get:
      summary: >-
        Addresses returns an address that can be used as source and destination
        is derived according to the given type,

        module name, and name.
      operationId: Addresses
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              address:
                type: string
            description: >-
              QueryAddressesResponse is the response type for the
              Query/Addresses RPC method.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: 'invalid names with address type: invalid request'
              details: []
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: name
          description: The name to be used for address derivation.
          in: path
          required: true
          type: string
        - name: type
          description: >-
            The Address Type, default 0 for ADDRESS_TYPE_32_BYTES or 1 for
            ADDRESS_TYPE_20_BYTES.

             - ADDRESS_TYPE_32_BYTES: the 32 bytes length address type of ADR 028.
             - ADDRESS_TYPE_20_BYTES: the default 20 bytes length address type.
          in: query
          required: false
          type: string
          enum:
            - ADDRESS_TYPE_32_BYTES
            - ADDRESS_TYPE_20_BYTES
          default: ADDRESS_TYPE_32_BYTES
        - name: module_name
          description: >-
            The module name to be used for address derivation, default is
            budget.
          in: query
          required: false
          type: string
      tags:
        - Query
  /cosmos/budget/v1beta1/budgets:
    get:
      summary: Budgets returns all budgets.
      description: Returns all budgets.
      operationId: Budgets
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              budgets:
                type: array
                items:
                  type: object
                  properties:
                    budget:
                      type: object
                      properties:
                        name:
                          type: string
                          title: name defines the name of the budget
                        rate:
                          type: string
                          title: >-
                            rate specifies the distributing amount by ratio of
                            total budget source
                        source_address:
                          type: string
                          title: >-
                            source_address defines the bech32-encoded address
                            that source of the budget
                        destination_address:
                          type: string
                          title: >-
                            destination_address defines the bech32-encoded
                            address of the budget pool to distribute
                        start_time:
                          type: string
                          format: date-time
                          title: start_time specifies the start time of the budget
                        end_time:
                          type: string
                          format: date-time
                          title: end_time specifies the end time of the budget
                      description: Budget defines a budget object.
                    total_collected_coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
            description: >-
              QueryBudgetsResponse is the response type for the Query/Budgets
              RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: name
          in: query
          required: false
          type: string
        - name: source_address
          in: query
          required: false
          type: string
        - name: destination_address
          in: query
          required: false
          type: string
      tags:
        - Query
      externalDocs:
        description: Find out more about the budget
        url: >-
          https://github.com/tendermint/budget/blob/main/x/budget/spec/02_state.md
  /cosmos/budget/v1beta1/params:
    get:
      summary: Params returns parameters of the budget module.
      description: Returns all parameters of the budget module.
      operationId: BudgetParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  epoch_blocks:
                    type: integer
                    format: int64
                    title: >-
                      The universal epoch length in number of blocks

                      A collection of budgets is executed with this epoch_blocks
                      parameter
                  budgets:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          title: name defines the name of the budget
                        rate:
                          type: string
                          title: >-
                            rate specifies the distributing amount by ratio of
                            total budget source
                        source_address:
                          type: string
                          title: >-
                            source_address defines the bech32-encoded address
                            that source of the budget
                        destination_address:
                          type: string
                          title: >-
                            destination_address defines the bech32-encoded
                            address of the budget pool to distribute
                        start_time:
                          type: string
                          format: date-time
                          title: start_time specifies the start time of the budget
                        end_time:
                          type: string
                          format: date-time
                          title: end_time specifies the end time of the budget
                      description: Budget defines a budget object.
                    title: >-
                      Budgets parameter can be added, modified, and deleted
                      through

                      parameter change governance proposal
                description: Params defines the parameters for the budget module.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
      externalDocs:
        description: Find out more about the params
        url: >-
          https://github.com/tendermint/budget/blob/main/x/budget/spec/06_params.md
definitions:
  cosmos.base.v1beta1.Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  cosmos.budget.v1beta1.AddressType:
    type: string
    enum:
      - ADDRESS_TYPE_32_BYTES
      - ADDRESS_TYPE_20_BYTES
    default: ADDRESS_TYPE_32_BYTES
    description: |-
      AddressType enumerates the available types of a address.

       - ADDRESS_TYPE_32_BYTES: the 32 bytes length address type of ADR 028.
       - ADDRESS_TYPE_20_BYTES: the default 20 bytes length address type.
  cosmos.budget.v1beta1.Budget:
    type: object
    properties:
      name:
        type: string
        title: name defines the name of the budget
      rate:
        type: string
        title: rate specifies the distributing amount by ratio of total budget source
      source_address:
        type: string
        title: >-
          source_address defines the bech32-encoded address that source of the
          budget
      destination_address:
        type: string
        title: >-
          destination_address defines the bech32-encoded address of the budget
          pool to distribute
      start_time:
        type: string
        format: date-time
        title: start_time specifies the start time of the budget
      end_time:
        type: string
        format: date-time
        title: end_time specifies the end time of the budget
    description: Budget defines a budget object.
  cosmos.budget.v1beta1.BudgetResponse:
    type: object
    properties:
      budget:
        type: object
        properties:
          name:
            type: string
            title: name defines the name of the budget
          rate:
            type: string
            title: >-
              rate specifies the distributing amount by ratio of total budget
              source
          source_address:
            type: string
            title: >-
              source_address defines the bech32-encoded address that source of
              the budget
          destination_address:
            type: string
            title: >-
              destination_address defines the bech32-encoded address of the
              budget pool to distribute
          start_time:
            type: string
            format: date-time
            title: start_time specifies the start time of the budget
          end_time:
            type: string
            format: date-time
            title: end_time specifies the end time of the budget
        description: Budget defines a budget object.
      total_collected_coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
  cosmos.budget.v1beta1.Params:
    type: object
    properties:
      epoch_blocks:
        type: integer
        format: int64
        title: |-
          The universal epoch length in number of blocks
          A collection of budgets is executed with this epoch_blocks parameter
      budgets:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              title: name defines the name of the budget
            rate:
              type: string
              title: >-
                rate specifies the distributing amount by ratio of total budget
                source
            source_address:
              type: string
              title: >-
                source_address defines the bech32-encoded address that source of
                the budget
            destination_address:
              type: string
              title: >-
                destination_address defines the bech32-encoded address of the
                budget pool to distribute
            start_time:
              type: string
              format: date-time
              title: start_time specifies the start time of the budget
            end_time:
              type: string
              format: date-time
              title: end_time specifies the end time of the budget
          description: Budget defines a budget object.
        title: |-
          Budgets parameter can be added, modified, and deleted through
          parameter change governance proposal
    description: Params defines the parameters for the budget module.
  cosmos.budget.v1beta1.QueryAddressesResponse:
    type: object
    properties:
      address:
        type: string
    description: >-
      QueryAddressesResponse is the response type for the Query/Addresses RPC
      method.
  cosmos.budget.v1beta1.QueryBudgetsResponse:
    type: object
    properties:
      budgets:
        type: array
        items:
          type: object
          properties:
            budget:
              type: object
              properties:
                name:
                  type: string
                  title: name defines the name of the budget
                rate:
                  type: string
                  title: >-
                    rate specifies the distributing amount by ratio of total
                    budget source
                source_address:
                  type: string
                  title: >-
                    source_address defines the bech32-encoded address that
                    source of the budget
                destination_address:
                  type: string
                  title: >-
                    destination_address defines the bech32-encoded address of
                    the budget pool to distribute
                start_time:
                  type: string
                  format: date-time
                  title: start_time specifies the start time of the budget
                end_time:
                  type: string
                  format: date-time
                  title: end_time specifies the end time of the budget
              description: Budget defines a budget object.
            total_collected_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
    description: >-
      QueryBudgetsResponse is the response type for the Query/Budgets RPC
      method.
  cosmos.budget.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          epoch_blocks:
            type: integer
            format: int64
            title: >-
              The universal epoch length in number of blocks

              A collection of budgets is executed with this epoch_blocks
              parameter
          budgets:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  title: name defines the name of the budget
                rate:
                  type: string
                  title: >-
                    rate specifies the distributing amount by ratio of total
                    budget source
                source_address:
                  type: string
                  title: >-
                    source_address defines the bech32-encoded address that
                    source of the budget
                destination_address:
                  type: string
                  title: >-
                    destination_address defines the bech32-encoded address of
                    the budget pool to distribute
                start_time:
                  type: string
                  format: date-time
                  title: start_time specifies the start time of the budget
                end_time:
                  type: string
                  format: date-time
                  title: end_time specifies the end time of the budget
              description: Budget defines a budget object.
            title: |-
              Budgets parameter can be added, modified, and deleted through
              parameter change governance proposal
        description: Params defines the parameters for the budget module.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  google.protobuf.Any:
    type: object
    properties:
      type_url:
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
      value:
        type: string
        format: byte
        description: >-
          Must be a valid serialized protocol buffer of the above specified
          type.
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".



      JSON

      ====

      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  grpc.gateway.runtime.Error:
    type: object
    properties:
      error:
        type: string
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
